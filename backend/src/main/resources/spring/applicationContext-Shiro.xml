<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config />

    <bean id="dbRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="yangDS" />
        <property name="permissionsLookupEnabled" value="true" />
        <property name="authenticationQuery"
                  value="SELECT PASSWORD FROM man_user WHERE USERNAME=?" />
        <property name="userRolesQuery"
                  value="SELECT role_id FROM man_user_role ur  WHERE ur.username=?" />
        <property name="permissionsQuery"
                  value="SELECT PERMISSION FROM man_role_perm rp  WHERE rp.role_id=? "/>
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5" />
            </bean>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="dbRealm"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <property name="loginUrl" value="/loginform"/>
        <property name="successUrl" value="/home"/>
        <property name="unauthorizedUrl" value="/unauthed"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                # some example chain definitions:
                /index.htm = anon
                /favicon.ico=anon
                /logout = logout
                /unauthed = authc
                /console/** = anon
                /css/** = anon
                /js/** = anon
                /images/** = anon
                /login/** = anon
                /lib/** = anon
                /mobile/** = anon

                /clienttool/login = anon

                /clienttool/** = authc
                /qiniu/** = anon

                /** = authc
                # more URL-to-FilterChain definitions here
            </value>
        </property>
    </bean>

    <bean id="anon" class="org.apache.shiro.web.filter.authc.AnonymousFilter" />
    <!-- use local MyFormAuthenticationFilter to save local user information -->
    <bean id="authc" class="com.yang.shop.shiro.MyFormAuthenticationFilter">
        <property name="successUrl" value="/home" />
    </bean>
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/loginform" />
    </bean>
    <bean id="roles" class="org.apache.shiro.web.filter.authz.RolesAuthorizationFilter" />
    <bean id="perm" class="org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter" />

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


</beans>